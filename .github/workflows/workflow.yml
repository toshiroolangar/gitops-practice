name: CI Workflow

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
 
jobs:
  build:
    environment: main
    runs-on: ubuntu-latest
    env:
      SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
      ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
      REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO: ${{ secrets.ECR_REPO }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
      - name: Run pytest
        run: |
          pytest || echo "No tests found, continuing build"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build image
        run: |
          COMMIT_ID=${GITHUB_SHA::7}
          docker build -t flask-boilerplate .
          docker tag flask-boilerplate flask-boilerplate:${COMMIT_ID}
          docker image ls
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Push image to ECR
        run: |
          COMMIT_ID=${GITHUB_SHA::7}
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ secrets.ECR_REPO }}
          
          # Tag and push images
          docker tag flask-boilerplate:${COMMIT_ID} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${COMMIT_ID}
          docker tag flask-boilerplate ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${COMMIT_ID}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
      
      # - name: Deploy to ECS
      #   run: |
      #     aws ecs update-service --cluster flask-cluster --service flask-service --force-new-deployment
      #     echo "Deployment to ECS initiated"
          
      # - name: Notify deployment status
      #   if: always()
      #   run: |
      #     if [ ${{ job.status }} == 'success' ]; then
      #       echo "Deployment completed successfully"
      #     else
      #       echo "Deployment failed"
      #     fi